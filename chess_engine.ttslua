--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ --]]

-----------------------------
-----------------------------
----- BEGIN SUNFISH.LUA -----
-----------------------------
-----------------------------

-- sunfish.lua, a human transpiler work of https://github.com/thomasahle/sunfish
-- embarassing and ugly translation done by Soumith Chintala
-- Code License: BSD

-- The table size is the maximum number of elements in the transposition table.
--local TABLE_SIZE = 1e6
local TABLE_SIZE = 1e6

-- This constant controls how much time we spend on looking for optimal moves.
--local NODES_SEARCHED = 1e4
local NODES_SEARCHED = 150

-- Mate value must be greater than 8*queen + 2*(rook+knight+bishop)
-- King value is set to twice this value such that if the opponent is
-- 8 queens up, but we got the king, we still exceed MATE_VALUE.
local MATE_VALUE = 30000

-- Our board is represented as a 120 character string. The padding allows for
-- fast detection of moves that don't stay within the board.
local A1, H1, A8, H8 = 91, 98, 21, 28
local initial =
    '         \n' .. --   0 -  9
    '         \n' .. --  10 - 19
    ' rnbqkbnr\n' .. --  20 - 29
    ' pppppppp\n' .. --  30 - 39
    ' ........\n' .. --  40 - 49
    ' ........\n' .. --  50 - 59
    ' ........\n' .. --  60 - 69
    ' ........\n' .. --  70 - 79
    ' PPPPPPPP\n' .. --  80 - 89
    ' RNBQKBNR\n' .. --  90 - 99
    '         \n' .. -- 100 -109
    '          '     -- 110 -119

local __1 = 1 -- 1-index correction
-------------------------------------------------------------------------------
-- Move and evaluation tables
-------------------------------------------------------------------------------
local N, E, S, W = -10, 1, 10, -1
local directions = {
    P = {N, 2*N, N+W, N+E},
    N = {2*N+E, N+2*E, S+2*E, 2*S+E, 2*S+W, S+2*W, N+2*W, 2*N+W},
    B = {N+E, S+E, S+W, N+W},
    R = {N, E, S, W},
    Q = {N, E, S, W, N+E, S+E, S+W, N+W},
    K = {N, E, S, W, N+E, S+E, S+W, N+W}
}

local pst = {
    P = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 198, 198, 198, 198, 198, 198, 198, 198, 0,
        0, 178, 198, 198, 198, 198, 198, 198, 178, 0,
        0, 178, 198, 198, 198, 198, 198, 198, 178, 0,
        0, 178, 198, 208, 218, 218, 208, 198, 178, 0,
        0, 178, 198, 218, 238, 238, 218, 198, 178, 0,
        0, 178, 198, 208, 218, 218, 208, 198, 178, 0,
        0, 178, 198, 198, 198, 198, 198, 198, 178, 0,
        0, 198, 198, 198, 198, 198, 198, 198, 198, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    B = {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 797, 824, 817, 808, 808, 817, 824, 797, 0,
        0, 814, 841, 834, 825, 825, 834, 841, 814, 0,
        0, 818, 845, 838, 829, 829, 838, 845, 818, 0,
        0, 824, 851, 844, 835, 835, 844, 851, 824, 0,
        0, 827, 854, 847, 838, 838, 847, 854, 827, 0,
        0, 826, 853, 846, 837, 837, 846, 853, 826, 0,
        0, 817, 844, 837, 828, 828, 837, 844, 817, 0,
        0, 792, 819, 812, 803, 803, 812, 819, 792, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    N = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 627, 762, 786, 798, 798, 786, 762, 627, 0,
        0, 763, 798, 822, 834, 834, 822, 798, 763, 0,
        0, 817, 852, 876, 888, 888, 876, 852, 817, 0,
        0, 797, 832, 856, 868, 868, 856, 832, 797, 0,
        0, 799, 834, 858, 870, 870, 858, 834, 799, 0,
        0, 758, 793, 817, 829, 829, 817, 793, 758, 0,
        0, 739, 774, 798, 810, 810, 798, 774, 739, 0,
        0, 683, 718, 742, 754, 754, 742, 718, 683, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    R = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 1258, 1263, 1268, 1272, 1272, 1268, 1263, 1258, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    Q = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 2529, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    K = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 60098, 60132, 60073, 60025, 60025, 60073, 60132, 60098, 0,
        0, 60119, 60153, 60094, 60046, 60046, 60094, 60153, 60119, 0,
        0, 60146, 60180, 60121, 60073, 60073, 60121, 60180, 60146, 0,
        0, 60173, 60207, 60148, 60100, 60100, 60148, 60207, 60173, 0,
        0, 60196, 60230, 60171, 60123, 60123, 60171, 60230, 60196, 0,
        0, 60224, 60258, 60199, 60151, 60151, 60199, 60258, 60224, 0,
        0, 60287, 60321, 60262, 60214, 60214, 60262, 60321, 60287, 0,
        0, 60298, 60332, 60273, 60225, 60225, 60273, 60332, 60298, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
}

-------------------------------------------------------------------------------
-- Chess logic
-------------------------------------------------------------------------------
local function isspace(s)
   if s == ' ' or s == '\n' then
      return true
   else
      return false
   end
end

local special = '. \n'

local function isupper(s)
   if special:find(s) then return false end
   return s:upper() == s
end

local function islower(s)
   if special:find(s) then return false end
   return s:lower() == s
end

-- super inefficient
local function swapcase(s)
   local s2 = ''
   for i=1,#s do
      local c = s:sub(i, i)
      if islower(c) then
	 s2 = s2 .. c:upper()
      else
	 s2 = s2 .. c:lower()
      end
   end
   return s2
end

function add_to_history(position)
    board_history[#board_history + 1] = position
end

local Position = {}

function Position.new(board, score, wc, bc, ep, kp)
   --[[  A state of a chess game
      board -- a 120 char representation of the board
      score -- the board evaluation
      wc -- the castling rights
      bc -- the opponent castling rights
      ep - the en passant square
      kp - the king passant square
   ]]--
   local self = {}
   self.board = board
   self.score = score
   self.wc = wc
   self.bc = bc
   self.ep = ep
   self.kp = kp
   for k,v in pairs(Position) do self[k] = v end
   return self
end

function Position:genMoves()
   local moves = {}
   -- For each of our pieces, iterate through each possible 'ray' of moves,
   -- as defined in the 'directions' map. The rays are broken e.g. by
   -- captures or immediately in case of pieces such as knights.
   for i = 1 - __1, #self.board - __1 do
      local p = self.board:sub(i + __1, i + __1)
      if isupper(p) and directions[p] then
	 for _, d in ipairs(directions[p]) do
	    local limit = (i+d) + (10000) * d -- fake limit
	    for j=i+d, limit, d do
	       local q = self.board:sub(j + __1, j + __1)
	       -- Stay inside the board
	       if isspace(self.board:sub(j + __1, j + __1)) then break; end
	       -- Castling
	       if i == A1 and q == 'K' and self.wc[0 + __1] then
		  table.insert(moves,  {j, j-2})
	       end
	       if i == H1 and q == 'K' and self.wc[1 + __1] then
		  table.insert(moves,  {j, j+2})
	       end
	       -- print(p, q, i, d, j)
	       -- No friendly captures
	       if isupper(q) then break; end
	       -- Special pawn stuff
	       if p == 'P' and (d == N+W or d == N+E) and q == '.' and j ~= self.ep and j ~= self.kp then
		  break;
	       end
	       if p == 'P' and (d == N or d == 2*N) and q ~= '.' then
		  break;
	       end
	       if p == 'P' and d == 2*N and (i < A1+N or self.board:sub(i+N + __1, i+N + __1) ~= '.') then
		  break;
	       end
	       -- Move it
	       table.insert(moves, {i, j})
	       -- print(i, j)
	       -- Stop crawlers from sliding
	       if p == 'P' or p == 'N' or p == 'K' then break; end
	       -- No sliding after captures
	       if islower(q) then break; end
	    end
	 end
      end
   end
   return moves
end


function Position:rotate()
   return self.new(
      swapcase(self.board:reverse()), -self.score,
      self.bc, self.wc, 119-self.ep, 119-self.kp)
end

function Position:move(move)
   assert(move) -- move is zero-indexed
   local i, j = move[0 + __1], move[1 + __1]
   local p, q = self.board:sub(i + __1, i + __1), self.board:sub(j + __1, j + __1)
   local function put(board, i, p)
      return board:sub(1, i-1) .. p .. board:sub(i+1)
   end
   -- Copy variables and reset ep and kp
   local board = self.board
   local wc, bc, ep, kp = self.wc, self.bc, 0, 0
   local score = self.score + self:value(move)
   -- Actual move
   board = put(board, j + __1, board:sub(i + __1, i + __1))
   board = put(board, i + __1, '.')
   -- Castling rights
   if i == A1 then wc = {false, wc[0 + __1]}; end
   if i == H1 then wc = {wc[0 + __1], false}; end
   if j == A8 then bc = {bc[0 + __1], false}; end
   if j == H8 then bc = {false, bc[1 + __1]}; end
   -- Castling
   if p == 'K' then
      wc = {false, false}
      if math.abs(j-i) == 2 then
	 kp = math.floor((i+j)/2)
	 board = put(board, j < i and A1 + __1 or H1 + __1 , '.')
	 board = put(board, kp + __1, 'R')
      end
   end
   -- Special pawn stuff
   if p == 'P' then
      if A8 <= j and j <= H8 then
	 board = put(board, j + __1, 'Q')
      end
      if j - i == 2*N then
	 ep = i + N
      end
      if ((j - i) == N+W or (j - i) == N+E) and q == '.' then
	 board = put(board, j+S + __1, '.')
      end
   end
   -- We rotate the returned position, so it's ready for the next player
   return self.new(board, score, wc, bc, ep, kp):rotate()
end

function Position:value(move)
   local i, j = move[0 + __1], move[1 + __1]
   local p, q = self.board:sub(i + __1, i + __1), self.board:sub(j + __1, j + __1)
   -- Actual move
   local score = pst[p][j + __1] - pst[p][i + __1]
   -- Capture
   if islower(q) then
      score = score + pst[q:upper()][j + __1]
   end
   -- Castling check detection
   if math.abs(j-self.kp) < 2 then
      score = score + pst['K'][j + __1]
   end
   -- Castling
   if p == 'K' and math.abs(i-j) == 2 then
      score = score + pst['R'][math.floor((i+j)/2) + __1]
      score = score - pst['R'][j < i and A1 + __1 or H1 + __1]
   end
   -- Special pawn stuff
   if p == 'P' then
      if A8 <= j and j <= H8 then
	 score = score + pst['Q'][j + __1] - pst['P'][j + __1]
      end
      if j == self.ep then
	 score = score + pst['P'][j+S + __1]
      end
   end
   return score
end

-- the lamest possible and most embarassing namedtuple hasher ordered dict
-- I apologize to the world for writing it.
local tp = {}
local tp_index = {}
local tp_count = 0

local function tp_set(pos, val)
   local b1 = pos.bc[1] and 'true' or 'false'
   local b2 = pos.bc[2] and 'true' or 'false'
   local w1 = pos.bc[1] and 'true' or 'false'
   local w2 = pos.bc[2] and 'true' or 'false'
   local hash = pos.board .. ';' .. pos.score .. ';' .. w1 .. ';' .. w2 .. ';'
      .. b1 .. ';' .. b2 .. ';' .. pos.ep .. ';' .. pos.kp
   tp[hash] = val
   tp_index[#tp_index + 1] = hash
   tp_count = tp_count + 1
end

local function tp_get(pos)
   local b1 = pos.bc[1] and 'true' or 'false'
   local b2 = pos.bc[2] and 'true' or 'false'
   local w1 = pos.bc[1] and 'true' or 'false'
   local w2 = pos.bc[2] and 'true' or 'false'
   local hash = pos.board .. ';' .. pos.score .. ';' .. w1 .. ';' .. w2 .. ';'
      .. b1 .. ';' .. b2 .. ';' .. pos.ep .. ';' .. pos.kp
   return tp[hash]
end

local function tp_popitem()
   tp[tp_index[#tp_index]] = nil
   tp_index[#tp_index] = nil
   tp_count = tp_count - 1
end

-------------------------------------------------------------------------------
-- Search logic
-------------------------------------------------------------------------------

local nodes = 0

local function bound(pos, gamma, depth)
    function boundCoroutine()
        --[[ returns s(pos) <= r < gamma    if s(pos) < gamma
             returns s(pos) >= r >= gamma   if s(pos) >= gamma
        ]]--
        --log('at start of bound()')
        bound_done = false
        coroutine.yield(0)
        nodes = nodes + 1
        --log(nodes)

        -- Look in the table if we have already searched this position before.
        -- We use the table value if it was done with at least as deep a search
        -- as ours, and the gamma value is compatible.
        local entry = tp_get(pos)
        assert(depth)
        if entry ~= nil and entry.depth >= depth and (
                entry.score < entry.gamma and entry.score < gamma or
                entry.score >= entry.gamma and entry.score >= gamma) then
            bound_score = entry.score
            bound_done = true
            return 1
        end

        -- Stop searching if we have won/lost.
        if math.abs(pos.score) >= MATE_VALUE then
            bound_score = pos.score
            bound_done = true
            return 1
        end

        -- Null move. Is also used for stalemate checking
        local nullscore
        if depth > 0 then
            bound(pos:rotate(), 1-gamma, depth-3)
            while not bound_done do
                coroutine.yield(0)
            end

            nullscore = -bound_score
        else
            nullscore = pos.score
        end
        --local nullscore = depth > 0 and -bound_score or pos.score
        --nullscore = -MATE_VALUE*3 if depth > 0 else pos.score
        if nullscore >= gamma then
            bound_score = nullscore
            bound_done = true
            return 1
        end

        -- We generate all possible, pseudo legal moves and order them to provoke
        -- cuts. At the next level of the tree we are going to minimize the score.
        -- This can be shown equal to maximizing the negative score, with a slightly
        -- adjusted gamma value.
        local best, bmove = -3*MATE_VALUE, nil
        local moves = pos:genMoves()
        local function sorter(a, b)
            local va = pos:value(a)
            local vb = pos:value(b)
            if va ~= vb then
                return va > vb
            else
                if a[1] == b[1] then
                    return a[2] > b[2]
                else
                    return a[1] < b[1]
                end
            end
        end
        table.sort(moves, sorter)
        for _,move in ipairs(moves) do
            -- We check captures with the value function, as it also contains ep and kp
            if depth <= 0 and pos:value(move) < 150 then
                break
            end

            bound(pos:move(move), 1-gamma, depth-1)
            while not bound_done do
                coroutine.yield(0)
            end

            local score = -bound_score
            --log(move[1] .. ' ' ..  move[2] .. ' ' .. score)
            if score > best then
                best = score
                bmove = move
            end
            if score >= gamma then
                break
            end
        end

        -- If there are no captures, or just not any good ones, stand pat
        if depth <= 0 and best < nullscore then
            bound_score = nullscore
            bound_done = true
            return 1
        end
        -- Check for stalemate. If best move loses king, but not doing anything
        -- would save us. Not at all a perfect check.
        if depth > 0 and (best <= -MATE_VALUE) and nullscore > -MATE_VALUE then
            best = 0
        end

        -- We save the found move together with the score, so we can retrieve it in
        -- the play loop. We also trim the transposition table in FILO order.
        -- We prefer fail-high moves, as they are the ones we can build our pv from.
        if entry == nil or depth >= entry.depth and best >= gamma then
            tp_set(pos, {depth = depth, score = best, gamma = gamma, move = bmove})
            if tp_count > TABLE_SIZE then
                tp_popitem()
            end
        end
        --log('ending bound() at end')
        bound_score = best
        bound_done = true
        return 1
    end

    startLuaCoroutine(Global, 'boundCoroutine')
end

local strsplit = function(a)
   local out = {}
   while true do
      local pos, _ = a:find('\n')
      if pos then
	 out[#out+1] = a:sub(1, pos-1)
	 a = a:sub(pos+1)
      else
	 out[#out+1] = a
	 break
      end
   end
   return out
end

local function printboard(board)
    local str = ''
    local l = strsplit(board, '\n')
    for k,v in ipairs(l) do
      for i=1,#v do
          str = str .. v:sub(i,i)
          str = str .. '  '
       end
       str = str .. '\n'
    end

   log(str)
end

local function render(i)
   local rank, fil = math.floor((i - A1) / 10), (i - A1) % 10
   return string.char(fil + string.byte('a')) .. tostring(-rank + 1)
end

local function render_black(move)
    return render(119-move[0 + __1]) .. render(119-move[1 + __1])
end

function set_interactivity(value)
    for key, obj in pairs(getAllObjects()) do
        obj.interactable = value
    end
end

function handle_pawn_promotion(square_end)
    -- Handle pawn promotion
    -- Note that sunfish.lua always promotes to queen
    -- Works for black. Need to test for white.
    local moved_piece = square_to_trigger[square_end].getObjects()[1]

    if moved_piece.name == 'Chess_Pawn' then
        local rank_end = square_end:sub(2, 2)
        if rank_end == '1' or rank_end == '8' then
            local position = moved_piece.getPosition()
            position.y = 3.41

            local queen_json
            if rank_end == '1' then
                queen_json = Black_Queen.getJSON()
            else
                queen_json = White_Queen.getJSON()
            end
            -- Delete pawn
            moved_piece.destruct()
            -- Clone new queen from stored piece
            spawnObjectJSON({
                json = queen_json,
                position = position,
                rotation = {x=0, y=0, z=0}
            })
        end
    end
end

-- Takes a move string ('e2e4') and physically executes the move on the board
function execute_move(move)
    local square_start = move:sub(1, 2)
    local square_end = move:sub(3, 4)
    local trigger_start = square_to_trigger[square_start]
    local trigger_end = square_to_trigger[square_end]
    local position_start = trigger_start.getPosition()
    local position_end = trigger_end.getPosition()

    local moving_piece = trigger_start.getObjects()[1]
    local captured_piece = trigger_end.getObjects()[1]

    -- Handle en passant
    -- Check to see whether the moving piece is a pawn and whether its ending
    -- file is different than its starting file.
    -- Works when calling execute_move independently. Needs to be tested in an
    -- actual game.
    if (moving_piece.name == 'Chess_Pawn' and
        square_start:sub(1, 1) ~= square_end:sub(1, 1)
    ) then
        -- This implies that the pawn is capturing a piece. If no piece exists
        -- on the ending square, then we are executing an en passant
        if not captured_piece then
            -- The pawn that is being captured is at the capturing pawn's
            -- ending file and starting rank
            local captured_square = square_end:sub(1, 1)..square_start:sub(2, 2)
            captured_piece = square_to_trigger[captured_square].getObjects()[1]
        end
    end

    if captured_piece then
        -- Move it up and out of the way
        local new_pos = captured_piece.getPosition()
        new_pos.y = 10
        captured_piece.setPositionSmooth(new_pos, false, false)
        Wait.condition(
            function()
                -- Throw it because I'm lazy
                captured_piece.addForce(Vector(0, 15, 20))
                captured_piece.addTorque(Vector(10, 0, 0))
            end,
            function() return not captured_piece.isSmoothMoving() end)
    end

    --local position_end = trigger_end.getPosition()
    -- The origin of the chess pieces is at their center,
    -- so we raise them up a bit so they don't try to phase into the board
    position_end.y = 4
    moving_piece.setPositionSmooth(position_end, false, false)

    -- Castling isn't signified by any special character,
    -- so we'll need to check whether the moving piece is a king
    -- and whether it's moving more than one square. If so,
    -- move the corresponding rook to the appropriate spot.
    if moving_piece.name == 'Chess_King' then
        local distance_vec = position_end - position_start
        if math.abs(distance_vec.x) > 1.5*square_size then
            -- Move rook based on what square the king ends on
            local rook_move = {
                ['c1'] = 'a1d1',
                ['g1'] = 'h1f1',
                ['c8'] = 'a8d8',
                ['g8'] = 'h8f8'
            }
            execute_move(rook_move[square_end])
        end
    end

    if not game_over and not player_turn then
        Wait.condition(
            function()
                handle_pawn_promotion(square_end)
                set_interactivity(true)
                player_turn = true
                broadcastToAll("White's turn!", {r=1, g=1, b=1})
                UI.setAttribute('turn_text', 'text', "White's turn")
                UI.setAttribute('turn_text', 'color', 'white')
            end,
            function()
                return not moving_piece.isSmoothMoving() and moving_piece.resting
            end
        )
    end
end

local function end_game(winner)
    game_over = true
    set_interactivity(false)

    if winner == 'white' then
        log("You won")
        broadcastToAll("White wins!", {r=0, g=1, b=0})
    else
        log("You lost")
        broadcastToAll("Black wins!", {r=1, g=0, b=0})
    end
end

local function engine_finished()
    log('Engine done')
    -- print(move, score)
    assert(chosen_score)
    if chosen_score <= -MATE_VALUE then
        end_game('white')
        -- If the player won, the winning move has already been played,
        -- so immediately return
        return
    end
    if chosen_score >= MATE_VALUE then
        end_game('black')
        -- If the engine won, we still need to execute the move, so continue
    end

    assert(chosen_move)
    -- The black player moves from a rotated position, so we have to
    -- 'back rotate' the move before printing it.
    local move_str = render_black(chosen_move)

    log("My move: "..move_str)
    pos = pos:move(chosen_move)
    add_to_history(pos)
    printboard(pos.board)

    chosen_move = nil
    chosen_score = nil

    execute_move(move_str)
end

function search()
    --log('start search() coroutine')
    -- Iterative deepening MTD-bi search
    maxn = NODES_SEARCHED
    nodes = 0 -- the global value "nodes"
    local score

    -- We limit the depth to some constant, so we don't get a stack overflow in
    -- the end game.
    for depth=1,98 do
        --log('depth: '..tostring(depth))
        -- The inner loop is a binary search on the score of the position.
        -- Inv: lower <= score <= upper
        -- However this may be broken by values from the transposition table,
        -- as they don't have the same concept of p(score). Hence we just use
        -- 'lower < upper - margin' as the loop condition.
        local lower, upper = -3*MATE_VALUE, 3*MATE_VALUE
        while lower < upper - 3 do
            local gamma = math.floor((lower+upper+1)/2)
            --log('starting bound() from search()')
            bound(pos, gamma, depth)
            --log('back to search() from bound()')
            while not bound_done do
                --log('search yielding in while loop')
                coroutine.yield(0)
            end
            score = bound_score
            --log('nodes '..nodes..' gamma '..gamma..' score '..score)
            assert(score)
            if score >= gamma then
                lower = score
            end
            if score < gamma then
                upper = score
            end
        end
        assert(score)

        --log(string.format("Searched %d nodes. Depth %d. Score %d(%d/%d)", nodes, depth, score, lower, upper))

        -- We stop deepening if the global N counter shows we have spent too
        -- long, or if we have already won the game.
        if nodes >= maxn or math.abs(score) >= MATE_VALUE then
            break
        end

        --log('pausing coroutine')
        coroutine.yield(0)
        --log('resuming coroutine')
    end

    -- If the game hasn't finished we can retrieve our move from the
    -- transposition table.
    local entry = tp_get(pos)
    if entry ~= nil then
        -- return entry.move, score
        chosen_move = entry.move
        chosen_score = score
    else
        -- return nil, score
        chosen_move = nil
        chosen_score = score
    end

    --log('end coroutine')
    engine_finished()
    return 1
end


-------------------------------------------------------------------------------
-- User interface
-------------------------------------------------------------------------------

local function parse(c)
   if not c then return nil end
   local p, v = c:sub(1,1), c:sub(2,2)
   if not (p and v and tonumber(v)) then return nil end

   local fil, rank = string.byte(p) - string.byte('a'), tonumber(v) - 1
   return A1 + fil - 10*rank
end

local function ttfind(t, k)
   assert(t)
   if not k then return false end
   for _,v in ipairs(t) do
      if k[1] == v[1] and k[2] == v[2] then
	 return true
      end
   end
   return false
end

local function setup_game()
   pos = Position.new(initial, 0, {true,true}, {true,true}, 0, 0)
   board_history = {}
   add_to_history(pos)

   -- We add some spaces to the board before we print it.
   -- That makes it more readable and pleasing.
   printboard(pos.board)
end

local function handle_player_move(move)
    local square_start = move:sub(1, 2)
    local square_end = move:sub(3, 4)
    local parsed_move = {parse(square_start), parse(square_end)}
    if not ttfind(pos:genMoves(), parsed_move) then
        -- Inform the user when invalid input (e.g. "help") is entered
        log("Invalid input. Please enter a move in the proper format (e.g. g8f6)")
        return false
    -- else
    --     -- This seems to work well enough for check checking,
    --     -- however it significantly slows down the game.
    --     -- Can I somehow incorporate this into genMoves()?
    --     local this_pos = pos:move(move)
    --     local next_move, this_score = search(this_pos)
    --     local lower, upper = -3*MATE_VALUE, 3*MATE_VALUE
    --     local gamma = math.floor((lower+upper+1)/2)
    --     next_score = bound(this_pos:move(next_move), gamma, 1)
    --     log(next_score)
    --     if math.abs(next_score) >= MATE_VALUE then
    --     	-- Illegal move - in check?
    --     	log('Illegal move - King in check!')
    --     	return false
    --     end
    end

    -- Check to see whether the piece moved was a king
    local trigger_end = square_to_trigger[square_end]
    local moving_piece = trigger_end.getObjects()[1]

    if moving_piece.name == 'Chess_King' then
        -- Check to see whether the player intended to castle
        local trigger_start = square_to_trigger[square_start]
        local position_start = trigger_start.getPosition()
        local position_end = trigger_end.getPosition()
        local distance_vec = position_end - position_start

        if math.abs(distance_vec.x) > 1.5*square_size then
            -- Move rook based on what square the king ends on
            local rook_move = {
                ['c1'] = 'a1d1',
                ['g1'] = 'h1f1',
                ['c8'] = 'a8d8',
                ['g8'] = 'h8f8'
            }
            execute_move(rook_move[square_end])
        end
    end

    handle_pawn_promotion(square_end)

    pos = pos:move(parsed_move)
    -- The position is now reversed. Rotate it back to store in history.
    add_to_history(pos:rotate())

    -- After our move we rotate the board and print it again.
    -- This allows us to see the effect of our move.
    printboard(pos:rotate().board)

    return true
end

local function make_engine_move()
    log('Engine running...')
    -- Fire up the engine to look for a move.
    -- local move, score = search(pos)
    startLuaCoroutine(Global, 'search')
    -- Wait.condition(engine_finished, function() return chosen_score ~= nil end)
    --log('doing something else...')
end



----------------------------
----------------------------
----- BEGIN TTS LOGIC -----
----------------------------
----------------------------

function index_to_square(file_index, rank_index)
    local name = squares[9-rank_index][file_index]
    return name
end

function trigger_callback(obj, name)
    obj.setName(name)

    triggers[#triggers+1] = obj
    square_to_trigger[name] = obj

    local piece = obj.getObjects()[1]
    if piece then
        -- Assign piece to white or black based on its rank
        -- Should change to not show name on hover
        if tonumber(name:sub(2)) <= 4 then
            piece.setName('white')
        else
            piece.setName('black')
        end

        -- The piece's mouseover tooltip now shows 'black' or 'white'.
        -- We'll disable that.
        piece.tooltip = false

        -- Store this piece for later reference
        pieces[piece.getName()][piece.name] = piece

        -- If piece is a queen, store it for later use when promoting pawns
        if piece.name == 'Chess_Queen' then
            if piece.getName() == 'white' then
                White_Queen = piece
            else
                Black_Queen = piece
            end
        end
    end

    board_state[obj] = piece
end

function after_triggers_spawned()
    log('Triggers spawned')
end

--Run once to spawn board triggers
function spawn_triggers()
    for rank = 1,8 do
        local z = a1_xz + (rank-1)*square_size

        for file = 1,8 do
            local x = a1_xz + (file-1)*square_size
            local name = index_to_square(file, rank)

            spawnObject({
              type = "ScriptingTrigger",
              position = {x=x, y=1.7, z=z},
              scale = {x=1, y=0.1, z=1},
              sound = false,
              callback_function = function(obj) trigger_callback(obj, name) end
            })
        end
    end

    Wait.condition(after_triggers_spawned, function() return #triggers == 64 end)
end

--[[ The onLoad event is called after the game save finishes loading. --]]
function onLoad()
    squares = {
        {"a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8"},
        {"a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7"},
        {"a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6"},
        {"a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5"},
        {"a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4"},
        {"a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3"},
        {"a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2"},
        {"a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1"}
    }

    sunfish_to_tts_pieces = {
        p = 'Chess_Pawn',
        r = 'Chess_Rook',
        n = 'Chess_Knight',
        b = 'Chess_Bishop',
        q = 'Chess_Queen',
        k = 'Chess_King'
    }

    game_over = false
    player_move = ''
    player_color = 'white'
    player_turn = true
    square_size = 1.7
    a1_xz = -3.5 * square_size
    -- 1D array of triggers
    triggers = {}
    -- Table mapping trigger to piece (not yet used or kept up to date)
    board_state = {}
    -- Table mapping square to trigger
    square_to_trigger = {}
    -- Table mapping type of piece to object of that piece type
    pieces = {white = {}, black = {}}

    spawn_triggers()
    setup_game()
end

--[[ The onUpdate event is called once per frame. --]]
function onUpdate()
    --[[ print('onUpdate loop!') --]]
    -- This is meant to show the engine's progress in finding a move, however
    -- nodes is a minimum, not a maximum, so I'm not sure how helpful this is.
    --UI.setAttribute('progressbar', 'percentage', nodes / NODES_SEARCHED * 100)
end

function onObjectLeaveScriptingZone(zone, leave_object)
    player_move = ''

    if player_turn and leave_object.getName() == player_color then
        local name = zone.getName()
        log('Leaving '..name)
        player_move = name
    end
end

function onObjectEnterScriptingZone(zone, enter_object)
    local function handleEvent(zone, enter_object)
        local name = zone.getName()

        if #name > 0 then
            log('Entering '..name)
            player_move = player_move..name

            -- If the player actually moved a piece to a different square
            if player_move:sub(1, 2) ~= player_move:sub(3, 4) then
                log('Player move: '..player_move)

                -- Send the player's move to the engine
                local valid_move = handle_player_move(player_move)

                if valid_move then
                    -- Set player_turn to false
                    -- It will get reset to true during make_engine_move()
                    player_turn = false
                    set_interactivity(false)
                    -- Let the engine choose a move
                    broadcastToAll("Black's turn...", {r=0, g=0, b=0})
                    UI.setAttribute('turn_text', 'text', "Black's turn")
                    UI.setAttribute('turn_text', 'color', 'black')
                    make_engine_move()
                else
                    broadcastToAll('Illegal move!', {r=1, g=0.5, b=0})
                    -- Reset the piece
                    -- This doesn't play nicely if the move was messy
                    player_turn = false
                    local orig_square = player_move:sub(1, 2)
                    local orig_pos = square_to_trigger[orig_square].getPosition()
                    orig_pos.y = 4
                    enter_object.setPositionSmooth(orig_pos, false, true)
                    Wait.condition(
                        function() player_turn = true end,
                        function()
                            return not enter_object.isSmoothMoving() and enter_object.resting
                        end
                    )
                end
            else
                player_move = ''
            end
        end
    end

    if player_turn and enter_object.getName() == player_color then
        Wait.condition(
            function() handleEvent(zone, enter_object) end,
            function() return enter_object.resting end
        )
    end
end

-- Takes a sunfish.lua board position string and sets it up on the TTS board
function set_position(position)
    log('setting up position...')
    log(position)
    player_turn = false

    -- Clear the current board
    for _, trigger in pairs(triggers) do
        local piece = trigger.getObjects()[1]
        if piece then
            piece.destruct()
        end
    end

    -- Build the new position
    for square = A8, H1 do
        log(square)
        local piece = position:sub(square + __1, square + __1)
        log(piece)

        if piece ~= '.' and piece ~= ' ' and piece ~= '\n' then
            local lower_piece = piece:lower()
            local color = 'white'
            if piece == lower_piece then
                color = 'black'
            end

            -- Get xyz position to spawn piece
            local square_str = tostring(square - 10)
            log(square_str)
            local rank_index = tonumber(square_str:sub(1, 1))
            local file_index = tonumber(square_str:sub(2, 2))
            local square_name = squares[rank_index][file_index]
            log(square_name)
            local trigger = square_to_trigger[square_name]
            log(trigger)
            local pos = trigger.getPosition()
            pos.y = 4

            -- Spawn the piece
            local piece_json = pieces[color][sunfish_to_tts_pieces[lower_piece]].getJSON()
            spawnObjectJSON({
                json = piece_json,
                position = pos,
                rotation = {x=0, y=0, z=0}
            })
        end
    end

    Wait.time(function() player_turn = true end, 1.5)
end

-- Go back in the game's history to before last player move
-- Buggy when going back more than once
function step_game_back()
    local new_position = board_history[#board_history - 2]
    pos = new_position
    set_position(new_position.board)
end
